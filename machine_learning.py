# -*- coding: utf-8 -*-
"""machine learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qhtEBhbQ09y3ZRZhF_84Hi_NB28aG-TU
"""

from google.colab import files
uploaded = files.upload()  # Selecting the ZIP file from computer that was downloaded from kaggle

import zipfile
import os

# Defining file paths
zip_path = "archive (14).zip"
extract_path = "mnist_data"

# Extract the zip file
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

# List extracted files
os.listdir(extract_path)

import numpy as np
import struct
import os

# Function to load MNIST images from IDX format
def load_mnist_images(filename):
    with open(filename, 'rb') as f:
        _, num, rows, cols = struct.unpack(">IIII", f.read(16))
        return np.frombuffer(f.read(), dtype=np.uint8).reshape(num, rows, cols)

# Function to load MNIST labels from IDX format
def load_mnist_labels(filename):
    with open(filename, 'rb') as f:
        _, num = struct.unpack(">II", f.read(8))
        return np.frombuffer(f.read(), dtype=np.uint8)

# Set paths to extracted files (Update if needed)
dataset_path = "mnist_data"  # Folder where files are extracted

train_images_path = os.path.join(dataset_path, "train-images.idx3-ubyte")
train_labels_path = os.path.join(dataset_path, "train-labels.idx1-ubyte")
test_images_path = os.path.join(dataset_path, "t10k-images.idx3-ubyte")
test_labels_path = os.path.join(dataset_path, "t10k-labels.idx1-ubyte")

# Load data
train_images = load_mnist_images(train_images_path)
train_labels = load_mnist_labels(train_labels_path)
test_images = load_mnist_images(test_images_path)
test_labels = load_mnist_labels(test_labels_path)

# Display dataset shape
print(f"Train Images Shape: {train_images.shape}")  # Expected: (60000, 28, 28)
print(f"Train Labels Shape: {train_labels.shape}")  # Expected: (60000,)
print(f"Test Images Shape: {test_images.shape}")    # Expected: (10000, 28, 28)
print(f"Test Labels Shape: {test_labels.shape}")    # Expected: (10000,)")

# Normalize pixel values (0-255 → 0-1)
train_images = train_images / 255.0
test_images = test_images / 255.0

# Flatten images (28x28 → 784 features)
X_train = train_images.reshape(len(train_images), -1)
X_test = test_images.reshape(len(test_images), -1)

# Labels (already in correct format)
y_train = train_labels
y_test = test_labels

# Print new shapes
print("Training Data Shape:", X_train.shape)  # Expected: (60000, 784)
print("Test Data Shape:", X_test.shape)  # Expected: (10000, 784)

from sklearn.model_selection import train_test_split

# Split 90% for training, 10% for validation
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=42)

# Print new dataset shapes
print("Training Data Shape:", X_train.shape)
print("Validation Data Shape:", X_val.shape)
print("Test Data Shape:", X_test.shape)

from sklearn.ensemble import RandomForestClassifier

# Train Random Forest Model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42, n_jobs=-1)
rf_model.fit(X_train, y_train)

# Predict on validation data
y_val_pred = rf_model.predict(X_val)

print("Model training complete!")

from sklearn.metrics import classification_report, accuracy_score

# Evaluate model on validation set
val_accuracy = accuracy_score(y_val, y_val_pred)
print("Validation Accuracy:", val_accuracy)

# Display classification report
print("Classification Report on Validation Set:\n", classification_report(y_val, y_val_pred, digits=4))

# Predict on test data
y_test_pred = rf_model.predict(X_test)

# Evaluate model on test set
test_accuracy = accuracy_score(y_test, y_test_pred)
print("Test Accuracy:", test_accuracy)

# Display classification report
print("Classification Report on Test Set:\n", classification_report(y_test, y_test_pred, digits=4))

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

# Generate confusion matrix
cm = confusion_matrix(y_test, y_test_pred)

# Plot confusion matrix
plt.figure(figsize=(8,6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=range(10), yticklabels=range(10))
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix for MNIST Classification")
plt.show()

import matplotlib.pyplot as plt

# Select 10 random images from the test set
num_samples = 10
random_indices = np.random.choice(len(X_test), num_samples, replace=False)
sample_images = X_test[random_indices].reshape(num_samples, 28, 28)  # Reshape back to 28x28
sample_labels = y_test[random_indices]  # True labels

# Get model predictions
predicted_labels = rf_model.predict(X_test[random_indices])

# Plot images with predicted labels
plt.figure(figsize=(12, 6))
for i in range(num_samples):
    plt.subplot(2, 5, i+1)
    plt.imshow(sample_images[i], cmap='gray')
    plt.title(f"Pred: {predicted_labels[i]}\nTrue: {sample_labels[i]}")
    plt.axis('off')

plt.tight_layout()
plt.show()